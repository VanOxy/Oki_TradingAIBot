require('dotenv').config();
const fs = require('fs');
const input = require("input");
const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const { NewMessage } = require("telegram/events");
const { parseNotification } = require('./tools/tgMsgParsing');
const zmqClient = require('./zmq_client');

// ====== GLOBALS ======
const apiId = parseInt(process.env.API_ID); // –∏–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
const apiHash = process.env.API_HASH;       // –∏–∑ —Ç–æ–≥–æ –∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const sessionFile = process.env.SESSION;
let isNewSession = false;
let stringSession;

// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞
if (fs.existsSync(sessionFile)) {
  const saved = JSON.parse(fs.readFileSync(sessionFile, 'utf8'));
  stringSession = new StringSession(saved.session);
  console.log("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è.");
} else {
  stringSession = new StringSession("");
  isNewSession = true;
  console.log("üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è.");
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
});
if (!client) {
  console.error("‚ùå Error on client creation");
  return;
}

// ====== MAIN ======
(async () => {

  console.log("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º Telegram client...");
  // connection
  if(isNewSession){ // –µ—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    console.log("No session detected");
    await client.start({
      phoneNumber: async () => await input.text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
      password: async () => await input.text("üîë –í–≤–µ–¥–∏—Ç–µ 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω): "),
      phoneCode: async () => await input.text("üì© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
      onError: (err) => console.log(err),
    });
    const savedSession = client.session.save();
    console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!");
    fs.writeFileSync(sessionFile, JSON.stringify({session: savedSession}, null, 2));
  } else { // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –±–µ–∑ –ª–æ–≥–∏–Ω–∞
    await client.connect(); 
    console.log("üîå –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.");
  }

  // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ZMQ –æ–¥–∏–Ω —Ä–∞–∑
  await zmqClient.connect();

  const dialogs = await client.getDialogs();
  const OIbotDialog = dialogs.find(dialog => dialog.name === process.env.OI_BOT_NAME);
  if (!OIbotDialog) {
    console.error("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", process.env.OI_BOT_NAME);
    return;
  }

  client.addEventHandler(async (event) => {
    const msg = event.message;
    if (!msg || !msg.message) return;

    const parsed = parseNotification(msg.message);
    console.log(parsed);

    const data = {
      exchange: exchange,
      openInterest: openInterest,
      volume: volume,
      trades8h: trades8h,
      oiChange4h: oiChange4h,
      coinChange24h: coinChange24h,
      tradesCount8h: tradesCount8h,
  };

    if (parsed?.type === 'TRIGGER') {
      const f = parsed.features || {};
      const features = [
        nz(f.oi_pct),
        nz(f.volume_pct),
        nz(f.trades_8h),
        nz(f.oi_chg_4h_pct),
        nz(f.coin_chg_24h_pct),
        nz(f.score_8h),
        parsed.exchange === 'Binance' ? 1 : 0,
        parsed.exchange === 'Bybit' ? 1 : 0,
      ];

      try {
        const res = await zmqClient.sendTrigger(parsed.symbol, features);
        if (res.error) {
          console.error("AI error:", res.error);
        } else {
          console.log(`ü§ñ AI(TRIGGER) ${parsed.symbol} ‚Üí score=${Number(res.score).toFixed(3)}`);
        }
      } catch (e) {
        console.error("ZMQ Trigger error:", e.message);
      }
    }

    // –ö–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏—à—å —Å–±–æ—Ä —Ä—ã–Ω–∫–∞ (OHLCV/CVD/OI):
  // const marketFeatures = buildMarketFeaturesForSymbol(parsed.symbol);
  // if (marketFeatures) {
  //   try {
  //     const resM = await zmqClient.sendMarket(parsed.symbol, marketFeatures);
  //     if (resM.error) console.error("AI market error:", resM.error);
  //     else console.log(`ü§ñ AI(MARKET) ${parsed.symbol} ‚Üí score=${Number(resM.score).toFixed(3)}`);
  //   } catch (e) {
  //     console.error("ZMQ Market error:", e.message);
  //   }
  // }

  }, new NewMessage({ chats: [OIbotDialog.id] }));


  // const messages = await client.getMessages(OIbot.id, { limit: 10 });
  // for (const message of messages) {
  //   console.log("üí¨", message.message);
  // }
})().catch(error => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ:", error)
  process.exit(1);
});

function nz(v) {
  return (v === null || v === undefined || Number.isNaN(v)) ? 0 : Number(v);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
async function shutdown() {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
  try {
    //await closeBinanceFeed();
    console.log('–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å');
    process.exit(0);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ SIGINT (Ctrl+C)
process.on('SIGINT', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT (Ctrl+C)');
  await shutdown();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ SIGTERM (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Docker –∏–ª–∏ –û–°)
process.on('SIGTERM', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM');
  await shutdown();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  shutdown();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è exit (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
process.on('exit', (code) => {
  console.log(`–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω —Å –∫–æ–¥–æ–º: ${code}`);
});