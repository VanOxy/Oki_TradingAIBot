import WebSocket from 'ws';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

class BinanceSpotLargeTrades {
    constructor(symbols = ['btcusdt'], minAmountUSD = 10000) {
        if (!Array.isArray(symbols) || symbols.length === 0) {
            throw new Error('Symbols must be a non-empty array');
        }
        this.symbols = [...new Set(symbols.map(s => s.toLowerCase()))]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        this.minAmountUSD = minAmountUSD;
        this.ws = null;
        this.socketUrl = null; // –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.reconnectAttempts = 0; // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.maxReconnectAttempts = 5; // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
        this.reconnectDelay = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
        this.shutdown = false; // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.updateSocketUrl();
    }

    updateSocketUrl() {
        const streams = this.symbols.map(s => `${s}@aggTrade`).join('/');
        this.socketUrl = `wss://stream.binance.com:9443/stream?streams=${streams}`;
    }

    addSymbol(symbol) {
        const normalizedSymbol = symbol.toLowerCase();
        if (this.symbols.includes(normalizedSymbol)) {
            console.log(`–°–∏–º–≤–æ–ª ${normalizedSymbol} —É–∂–µ –≤ –ø–æ–¥–ø–∏—Å–∫–µ`);
            return false;
        }
        this.symbols.push(normalizedSymbol);
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω —Å–∏–º–≤–æ–ª: ${normalizedSymbol}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...`);
        this.restart();
        return true;
    }

    restart() {
        if (this.ws) {
            this.ws.close();
        }
        this.updateSocketUrl();
        this.run();
    }

    onMessage(message) {
        try {
            const msg = JSON.parse(message);
            const trade = msg.data;
            if (trade) {
                const amountUSD = parseFloat(trade.p) * parseFloat(trade.q);
                if (amountUSD >= this.minAmountUSD) {
                    console.log(`üìà –ö—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞: ${trade.s}`);
                    console.log(`–°—Ç–æ—Ä–æ–Ω–∞: ${trade.m ? 'Sell' : 'Buy'}`);
                    console.log(`–û–±—ä–µ–º: ${parseFloat(trade.q).toFixed(4)}`);
                    console.log(`–¶–µ–Ω–∞: ${parseFloat(trade.p).toFixed(2)} USD`);
                    console.log(`–°—É–º–º–∞: ${amountUSD.toFixed(2)} USD`);
                    console.log(`–í—Ä–µ–º—è: ${new Date(trade.T).toISOString().replace('T', ' ').slice(0, 19)}`);
                    console.log('-'.repeat(50));
                }
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        }
    }

    onError(error) {
        console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
    }

    onClose() {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        if (!this.shutdown && this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${this.reconnectDelay}ms...`);
            setTimeout(() => this.restart(), this.reconnectDelay);
        } else if (!this.shutdown) {
            console.error('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
            this.shutdown();
        }
        // –ï—Å–ª–∏ this.shutdown === true, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ shutdown
    }

    onOpen() {
        console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è: ${this.symbols.join(', ')}`);
        this.reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    }

    async shutdown() {
        if (this.shutdown) {
            return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ shutdown
        }
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
        this.shutdown = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        if (this.ws) {
            this.ws.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            this.ws = null; // –û—á–∏—â–∞–µ–º ws, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
        }
        process.exit(0);
    }

    run() {
        if (this.shutdown) {
            return; // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ
        }
        this.ws = new WebSocket(this.socketUrl);
        this.ws.on('open', () => this.onOpen());
        this.ws.on('message', (data) => this.onMessage(data));
        this.ws.on('error', (error) => this.onError(error));
        this.ws.on('close', () => this.onClose());
    }
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

if (process.argv[1] === __filename) {
    const symbols = ['btcusdt']; // –ù–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    const indicator = new BinanceSpotLargeTrades(symbols, 10000);

    // –ü—Ä–∏–º–µ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    indicator.run();

    setTimeout(() => {
        indicator.addSymbol('ethusdt'); // –î–æ–±–∞–≤–ª—è–µ–º ETH —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    }, 5000);

    setTimeout(() => {
        indicator.addSymbol('bnbusdt'); // –î–æ–±–∞–≤–ª—è–µ–º BNB —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    }, 10000);

    setTimeout(() => {
        indicator.addSymbol('omgusdt'); // –î–æ–±–∞–≤–ª—è–µ–º OMG —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    }, 15000);

    process.on('SIGINT', async () => {
        console.log('\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT (Ctrl+C). –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
        await indicator.shutdown();
    });
}

export default BinanceSpotLargeTrades;