import WebSocket from 'ws';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
//import fs from 'fs/promises';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

class BinanceLiquidationIndicator {
    constructor() {
        this.socketUrl = 'wss://fstream.binance.com/ws/!forceOrder@arr';
        this.data = [];
        this.ws = null;
    }

    onMessage(message) {
        try {
            const msg = JSON.parse(message);
            if (msg.e === 'forceOrder') {
                const order = msg.o;
                const liquidation = {
                    symbol: order.s,
                    side: order.S,
                    orderType: order.o,
                    quantity: parseFloat(order.q),
                    price: parseFloat(order.p),
                    averagePrice: parseFloat(order.ap),
                    amountUSD: parseFloat(order.q) * parseFloat(order.ap),
                    timestamp: new Date(order.T).toISOString().replace('T', ' ').slice(0, 19),
                    status: order.X
                };
                this.data.push(liquidation);
                this.printLiquidation(liquidation);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        }
    }

    printLiquidation(liq) {
        const direction = liq.side === 'BUY' ? 'Shorts liquidated' : 'Longs liquidated';
        console.log(`üìä –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è: ${liq.symbol}`);
        console.log(`–°—Ç–æ—Ä–æ–Ω–∞: ${liq.side} (${direction})`);
        console.log(`–û–±—ä–µ–º: ${liq.quantity.toFixed(4)}`);
        console.log(`–¶–µ–Ω–∞: ${liq.price.toFixed(2)} USD`);
        console.log(`–°—É–º–º–∞: ${liq.amountUSD.toFixed(2)} USD`);
        console.log(`–í—Ä–µ–º—è: ${liq.timestamp}`);
        console.log('-'.repeat(50));
    }

    getData() {
        return this.data;
    }

    onError(error) {
        console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
    }

    onClose() {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }

    onOpen() {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π...');
    }

    async shutdown() {
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        try {
            //await fs.writeFile('liquidations.json', JSON.stringify(this.data, null, 2));
            console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ liquidations.json');
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
        }
        // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket
        if (this.ws) {
            this.ws.close();
        }
        process.exit(0);
    }

    run() {
        this.ws = new WebSocket(this.socketUrl);
        this.ws.on('open', () => this.onOpen());
        this.ws.on('message', (data) => this.onMessage(data));
        this.ws.on('error', (error) => this.onError(error));
        this.ws.on('close', () => this.onClose());
    }
}


if (process.argv[1] === __filename) {
    const indicator = new BinanceLiquidationIndicator();
    indicator.run();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ SIGINT (Ctrl+C)
    process.on('SIGINT', async () => {
        console.log('\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT (Ctrl+C). –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
        await indicator.shutdown();
    });
}

export default BinanceLiquidationIndicator;