import 'dotenv/config';
import fs from 'fs';
import input from 'input';
import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions/index.js';
import { NewMessage } from 'telegram/events/index.js';
import { parseTgNotification, parseTg1hReportDict } from './tools/tgMsgParsing.js';
import zmqClient from './zmq_client.js';
import KlineFeed from './klineFeed.js';

// ====== GLOBALS ======
const apiId = parseInt(process.env.API_ID); // –∏–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
const apiHash = process.env.API_HASH;       // –∏–∑ —Ç–æ–≥–æ –∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const sessionFile = process.env.SESSION;
let isNewSession = false;
let stringSession;

// TELEGRAM
getOrInitSession(sessionFile);
const tgClient = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
});
if (!tgClient) {
  console.error("‚ùå Error on Tg client creation");
  process.exit(1);
}

// ====== MAIN ======
(async () => {

  console.log("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º Telegram client...");
  await tgConnect(tgClient, isNewSession);

  // –Ω–∞—Ö–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ —Å OI-–±–æ—Ç–æ–º
  const tgDialogs = await tgClient.getDialogs();
  const OIbotDialog = tgDialogs.find(dialog => dialog.name === process.env.OI_BOT_NAME);
  if (!OIbotDialog) {
    console.error("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", process.env.OI_BOT_NAME);
    return;
  }

  // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ZMQ
  await zmqClient.connect();

  // ============ INIT BINANCE SPOT KLine STREAM =============
  const klineFeed = new KlineFeed({
    market: 'spot',   // –∏–ª–∏ 'futures'
    interval: '1m',      // '1m','5m','15m', '1h'
    pingInterval: 15000, // –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞ –≤ –º—Å
  });

  klineFeed.on('status', s => {
    if (s.type === 'open') console.log('Kline WS connected');
    if (s.type === 'close') console.log('Kline WS closed');
    if (s.type === 'error') console.error('Kline WS error:', s.error?.message);
    if (s.type === 'reconnect_scheduled') console.log('Kline WS reconnect in', s.delay, 'ms');
  });

  klineFeed.on('kline', async candle => {
    console.log("kline --> data from bbn:");
    console.log(`[${candle.interval}] ${candle.symbol} ${candle.openTime} O:${candle.open} H:${candle.high} L:${candle.low} C:${candle.close} qVol:${candle.quoteVolume}`);
    // —Ç—É—Ç –∂–µ –º–æ–∂–µ—à—å –ø—É—à–∏—Ç—å –≤ zmq
    const res = await zmqClient.sendMarket(candle);
  });

  //klineFeed.connect();

  // ============== subscribe TG messages =====================
  tgClient.addEventHandler(async (event) => {
    const msg = event.message;
    if (!msg || !msg.message) return;

    // manage hourly reports
    if(msg.message.includes("8 HOUR REPORT")) {
      const report = parseTg1hReportDict(msg.message);
      console.log("8 HOUR REPORT");
      console.log( report);
    } else { 
      // manage notifications
      console.log("üì¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:", msg.message);
      console.log("–æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ –ø–∞—Ä—Å–µ—Ä");
      const parsed = await parseTgNotification(msg.message);
      console.log("—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¢–ì –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–æ:", parsed);
      // check
      if (!parsed || !parsed.token) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", msg.message);
        return;
      }
      // manage only binance tokens
      //if(parsed.exchange === 'Binance') {
        // –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª –≤ kline
        console.log("run.js --> –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª –≤ kline:", parsed.token);
        //klineFeed.addSymbol(parsed.token);

        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ zmq
        try { 
          console.log('–æ—Ç—Å—ã–ª–∞–µ–º data –≤ zmq');
          const res = await zmqClient.sendTgData(parsed);
          if (res.error) {
            console.error("AI error:", res.error);
          } else {
            console.log(` –æ—Ç–≤–µ—Ç zmq ${parsed.token} ‚Üí score=${Number(res.score).toFixed(3)}`);
          }
        } catch (e) {
          console.error("ZMQ error:", e.message);
        }
      //}
    }
  }, new NewMessage({ chats: [OIbotDialog.id] }));
  //testPyServer(zmqClient);
})().catch(error => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ:", error)
  process.exit(1);
});

// ========= FUNCTIONS ===================

function getOrInitSession(sessionFile) {
  if (fs.existsSync(sessionFile)) {
    const saved = JSON.parse(fs.readFileSync(sessionFile, 'utf8'));
    stringSession = new StringSession(saved.session);
    console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è.");
  } else {
    stringSession = new StringSession("");
    isNewSession = true;
    console.log("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è.");
  }
}

async function tgConnect(tgClient, isNewSession) {
  if(isNewSession){ // –µ—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    console.log("No session detected");
    await tgClient.start({
      phoneNumber: async () => await input.text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
      password: async () => await input.text("üîë –í–≤–µ–¥–∏—Ç–µ 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω): "),
      phoneCode: async () => await input.text("üì© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
      onError: (err) => console.log(err),
    });
    const savedSession = tgClient.session.save();
    console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!");
    fs.writeFileSync(sessionFile, JSON.stringify({session: savedSession}, null, 2));
  } else { // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –±–µ–∑ –ª–æ–≥–∏–Ω–∞
    await tgClient.connect(); 
    console.log("üîå –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
async function shutdown() {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
  try {
    console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram...');
    await tgClient.disconnect();
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –∑–∞–∫—Ä—ã—Ç–æ.');
    console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç ZMQ...');
    await zmqClient.sock.close();
    console.log('–°–æ–∫–µ—Ç ZMQ –∑–∞–∫—Ä—ã—Ç.');
    console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å KlineFeed...');
    await klineFeed.close();
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å KlineFeed –∑–∞–∫—Ä—ã—Ç–æ.');
    console.log('–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å');
    process.exit(0);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
    process.exit(1);
  }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ SIGINT (Ctrl+C)
process.on('SIGINT', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT (Ctrl+C)');
  await shutdown();
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ SIGTERM (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Docker –∏–ª–∏ –û–°)
process.on('SIGTERM', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM');
  await shutdown();});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  shutdown();
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è exit (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
process.on('exit', (code) => {
  console.log(`–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω —Å –∫–æ–¥–æ–º: ${code}`);
});

async function testPyServer(zmqClient){
  const data = {
    token: 'UMAUSDT',
    exchange: 'ByBit',
    openInterest: '10.817',
    volume: '87.344',
    coinChange24h: ' 1.3',
    oiChange4h: '9.783',
    trades8h: 7777,
    notificationsCount8h: '3',
  };
  try{
    const res = await zmqClient.sendTgData(data);
    if (res.error) {
      console.error("AI error:", res.error);
    } else {
      console.log(`ü§ñ AI(TRIGGER) ${res.symbol} ‚Üí score=${Number(res.score).toFixed(3)}`);
    }
  } catch (e) {
    console.error("ZMQ Trigger error:", e.message);
  }
}