require('dotenv').config();
const fs = require('fs');
const input = require("input");
//const mongoose = require('mongoose');
const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const { NewMessage } = require("telegram/events");
const { parseNotification } = require('./tools/parsing');

// ====== MONGOOSE ======
// const MessageSchema = new mongoose.Schema({
//   chatId: String,
//   chatName: String,
//   messageId: Number,
//   text: String,
//   date: Date
// });
// const MessageModel = mongoose.model("Message", MessageSchema);

// ====== GLOBALS ======
const apiId = parseInt(process.env.API_ID); // –∏–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
const apiHash = process.env.API_HASH;       // –∏–∑ —Ç–æ–≥–æ –∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const sessionFile = process.env.SESSION;
let isNewSession = false;
let stringSession;

// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞
if (fs.existsSync(sessionFile)) {
  const saved = JSON.parse(fs.readFileSync(sessionFile, 'utf8'));
  stringSession = new StringSession(saved.session);
  console.log("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è.");
} else {
  stringSession = new StringSession("");
  isNewSession = true;
  console.log("üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è.");
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
});
if (!client) {
  console.error("‚ùå Error on client creation");
  return;
}

// ====== MAIN ======
(async () => {
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
  // await mongoose.connect(process.env.MONGO_URI, { 
  //   useNewUrlParser: true,
  //   useUnifiedTopology: true
  // });
  // console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB");

  console.log("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º Telegram client...");
  // connection
  if(isNewSession){ // –µ—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    console.log("No session detected");
    await client.start({
      phoneNumber: async () => await input.text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
      password: async () => await input.text("üîë –í–≤–µ–¥–∏—Ç–µ 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω): "),
      phoneCode: async () => await input.text("üì© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
      onError: (err) => console.log(err),
    });
    const savedSession = client.session.save();
    console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!");
    fs.writeFileSync(sessionFile, JSON.stringify({session: savedSession}, null, 2));
  } else { // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –±–µ–∑ –ª–æ–≥–∏–Ω–∞
    await client.connect(); 
    console.log("üîå –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.");
  }


  try {
    const dialogs = await client.getDialogs();
    const OIbotDialog = dialogs.find(dialog => dialog.name === process.env.OI_BOT_NAME);
    if (!OIbotDialog) {
      console.error("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", process.env.OI_BOT_NAME);
      return;
    }

    client.addEventHandler(async (event) => {
      const msg = event.message;
      if (!msg.message) return; // –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
      const parsed = parseNotification(msg.message);
      console.log(parsed);

      //console.log("üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg.message);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
      // const dbMsg = new MessageModel({
      //   chatId: targetChat.id.toString(),
      //   chatName: targetChat.name,
      //   messageId: msg.id,
      //   text: msg.message,
      //   date: msg.date
      // });
      //await dbMsg.save();

    }, new NewMessage({ chats: [OIbotDialog.id] }));

    // const messages = await client.getMessages(OIbot.id, { limit: 10 });
    // for (const message of messages) {
    //   console.log("üí¨", message.message);
    // }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", err.message);
  }
})();