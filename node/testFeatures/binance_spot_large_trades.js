import WebSocket from 'ws';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

class BinanceSpotLargeTrades {
    constructor(symbols = [], minAmountUSD = 10000) {
        this.symbols = [];
        this.minAmountUSD = minAmountUSD;
        this.ws = null;
        this.socketUrl = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.baseReconnectDelay = 50; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 50 –º—Å
        this.shutdownFlag = false;
        this.validSymbols = new Set();
        this.cacheExpiration = 0;
        this.cacheDuration = 3600 * 1000; // 1 —á–∞—Å
        this.tradeCache = new Map(); // –ö—ç—à –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        this.cacheTradeDuration = 5000; // 5 —Å–µ–∫ –¥–ª—è –∫—ç—à–∞ —Å–¥–µ–ª–æ–∫
        this.restartPending = false; // –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.symbolQueue = []; // –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
    }

    async fetchExchangeInfo() {
        try {
            const response = await fetch('https://api.binance.com/api/v3/exchangeInfo');
            if (!response.ok) {
                throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
            }
            const data = await response.json();
            this.validSymbols = new Set(
                data.symbols
                    .filter(s => s.status === 'TRADING' && s.quoteAsset === 'USDT')
                    .map(s => s.symbol.toLowerCase())
            );
            this.cacheExpiration = Date.now() + this.cacheDuration;
            console.log(`–ö—ç—à —Å–∏–º–≤–æ–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω. –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: ${this.validSymbols.size}`);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ exchangeInfo: ${error.message}`);
            this.validSymbols = new Set();
            this.cacheExpiration = 0;
        }
    }

    async validateSymbol(symbol) {
        if (Date.now() > this.cacheExpiration) {
            await this.fetchExchangeInfo();
        }
        return this.validSymbols.has(symbol.toLowerCase());
    }

    async initializeSymbols(symbols) {
        await this.fetchExchangeInfo();
        for (const symbol of symbols) {
            const normalizedSymbol = symbol.toLowerCase();
            if (await this.validateSymbol(normalizedSymbol)) {
                this.symbols.push(normalizedSymbol);
            } else {
                console.warn(`–°–∏–º–≤–æ–ª ${normalizedSymbol} –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è. –ü—Ä–æ–ø—É—â–µ–Ω.`);
            }
        }
    }

    updateSocketUrl() {
        if (this.symbols.length === 0) {
            this.socketUrl = null;
            return;
        }
        const streams = this.symbols.map(s => `${s}@aggTrade`).join('/');
        this.socketUrl = `wss://stream.binance.com:443/stream?streams=${streams}`;
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω socketUrl: ${this.socketUrl}`);
    }

    async addSymbol(symbol) {
        const normalizedSymbol = symbol.toLowerCase();
        if (this.symbols.includes(normalizedSymbol)) {
            console.log(`–°–∏–º–≤–æ–ª ${normalizedSymbol} —É–∂–µ –≤ –ø–æ–¥–ø–∏—Å–∫–µ`);
            return false;
        }
        if (await this.validateSymbol(normalizedSymbol)) {
            this.symbolQueue.push(normalizedSymbol);
            console.log(`–°–∏–º–≤–æ–ª ${normalizedSymbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...`);
            await this.processSymbolQueue();
            return true;
        } else {
            console.warn(`–°–∏–º–≤–æ–ª ${normalizedSymbol} –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è. –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω.`);
            return false;
        }
    }

    async processSymbolQueue() {
        if (this.restartPending || this.shutdownFlag || this.symbols.length === 0 && this.symbolQueue.length === 0) {
            return;
        }
        if (this.symbolQueue.length > 0) {
            const symbol = this.symbolQueue.shift();
            this.symbols.push(symbol);
            console.log(`–î–æ–±–∞–≤–ª–µ–Ω —Å–∏–º–≤–æ–ª: ${symbol}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...`);
            await this.restart();
        }
    }

    async restart() {
        if (this.shutdownFlag || this.symbols.length === 0 && this.symbolQueue.length === 0) {
            console.log('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }
        if (this.restartPending) {
            console.log('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ');
            return;
        }
        this.restartPending = true;
        if (this.ws && this.ws.readyState !== WebSocket.CLOSED) {
            await new Promise(resolve => {
                this.ws.on('close', () => {
                    this.ws = null;
                    resolve();
                });
                this.ws.close();
            });
        }
        setTimeout(() => {
            this.restartPending = false;
            this.run();
            this.processSymbolQueue(); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        }, this.baseReconnectDelay);
    }

    onMessage(message) {
        if (this.shutdownFlag) return; // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ shutdown
        try {
            const msg = JSON.parse(message);
            const trade = msg.data;
            if (trade) {
                const amountUSD = parseFloat(trade.p) * parseFloat(trade.q);
                if (amountUSD >= this.minAmountUSD) {
                    const tradeKey = `${trade.s}:${trade.T}:${trade.p}:${trade.q}:${trade.m}:${trade.a}`;
                    if (!this.tradeCache.has(tradeKey)) {
                        this.tradeCache.set(tradeKey, Date.now());
                        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞
                        const now = Date.now();
                        for (const [key, timestamp] of this.tradeCache) {
                            if (now - timestamp > this.cacheTradeDuration) {
                                this.tradeCache.delete(key);
                            }
                        }
                        console.log(`üìà –ö—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞: ${trade.s}`);
                        console.log(`–°—É–º–º–∞: ${amountUSD.toFixed(2)} USD`);
                        console.log(`–°—Ç–æ—Ä–æ–Ω–∞: ${trade.m ? 'Sell' : 'Buy'}`);
                        console.log(`–û–±—ä–µ–º: ${parseFloat(trade.q).toFixed(4)}`);
                        console.log(`–¶–µ–Ω–∞: ${parseFloat(trade.p).toFixed(2)} USD`);
                        console.log(`–í—Ä–µ–º—è: ${new Date(trade.T).toISOString().replace('T', ' ').slice(0, 19)}`);
                        console.log('-'.repeat(50));
                    }
                }
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        }
    }

    onError(error) {
        console.error(`–û—à–∏–±–∫–∞ WebSocket: ${error.message}, –∫–æ–¥: ${error.code || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        this.onClose();
    }

    onClose() {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        if (!this.shutdownFlag && this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${this.baseReconnectDelay}ms...`);
            this.restart();
        } else if (!this.shutdownFlag) {
            console.error('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
            this.shutdown();
        }
    }

    onOpen() {
        console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è: ${this.symbols.join(', ')}`);
        this.reconnectAttempts = 0;
    }

    async shutdown() {
        if (this.shutdownFlag) {
            return;
        }
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
        this.shutdownFlag = true;
        if (this.ws && this.ws.readyState !== WebSocket.CLOSED) {
            // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            this.ws.removeAllListeners();
            await new Promise(resolve => {
                this.ws.on('close', resolve);
                this.ws.close();
            });
            this.ws = null;
        }
        process.exit(0);
    }

    run() {
        if (this.shutdownFlag || this.symbols.length === 0 && this.symbolQueue.length === 0) {
            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }
        if (this.ws && (this.ws.readyState === WebSocket.CONNECTING || this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CLOSING)) {
            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è');
            return;
        }
        setTimeout(() => {
            try {
                this.updateSocketUrl();
                this.ws = new WebSocket(this.socketUrl);
                this.ws.on('open', this.onOpen.bind(this));
                this.ws.on('message', this.onMessage.bind(this));
                this.ws.on('error', this.onError.bind(this));
                this.ws.on('close', this.onClose.bind(this));
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebSocket: ${error.message}, –∫–æ–¥: ${error.code || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                this.onClose();
            }
        }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 500 –º—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º WebSocket
    }
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

if (process.argv[1] === __filename) {
    const indicator = new BinanceSpotLargeTrades();

    setTimeout(async () => {
        await indicator.addSymbol('btcusdt');
    }, 8000);

    setTimeout(async () => {
        await indicator.addSymbol('ethusdt');
    }, 16000);

    setTimeout(async () => {
        await indicator.addSymbol('bnbusdt');
    }, 24000);

    setTimeout(async () => {
        await indicator.addSymbol('adausdt');
    }, 32000);

    setTimeout(async () => {
        await indicator.addSymbol('xyzusdt');
    }, 40000);

    process.on('SIGINT', async () => {
        console.log('\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT (Ctrl+C). –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
        if (typeof indicator.shutdown === 'function') {
            await indicator.shutdown();
        } else {
            console.error('–û—à–∏–±–∫–∞: shutdown –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π');
            process.exit(1);
        }
    });
}

export default BinanceSpotLargeTrades;